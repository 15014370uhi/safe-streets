[{"D:\\github\\safe-streets\\src\\index.jsx":"1","D:\\github\\safe-streets\\src\\App.jsx":"2","D:\\github\\safe-streets\\src\\components\\Nav.jsx":"3","D:\\github\\safe-streets\\src\\components\\FavouritesList.jsx":"4","D:\\github\\safe-streets\\src\\components\\AddFavourite.jsx":"5","D:\\github\\safe-streets\\src\\context\\FavouritesContext.jsx":"6","D:\\github\\safe-streets\\src\\components\\Favourite.jsx":"7","D:\\github\\safe-streets\\src\\components\\MapSection.jsx":"8","D:\\github\\safe-streets\\src\\components\\MapImage.jsx":"9","D:\\github\\safe-streets\\src\\components\\FilterButtonsList.jsx":"10","D:\\github\\safe-streets\\src\\context\\FiltersContext.jsx":"11"},{"size":219,"mtime":1610645850427,"results":"12","hashOfConfig":"13"},{"size":559,"mtime":1610805260578,"results":"14","hashOfConfig":"13"},{"size":757,"mtime":1610718492511,"results":"15","hashOfConfig":"13"},{"size":714,"mtime":1610805240360,"results":"16","hashOfConfig":"13"},{"size":1813,"mtime":1610717317593,"results":"17","hashOfConfig":"13"},{"size":1429,"mtime":1610714475133,"results":"18","hashOfConfig":"13"},{"size":457,"mtime":1610717223196,"results":"19","hashOfConfig":"13"},{"size":802,"mtime":1610804623435,"results":"20","hashOfConfig":"13"},{"size":565,"mtime":1610719762920,"results":"21","hashOfConfig":"13"},{"size":3065,"mtime":1610809645525,"results":"22","hashOfConfig":"13"},{"size":1234,"mtime":1610802839439,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"h7snft",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\github\\safe-streets\\src\\index.jsx",[],["52","53"],"D:\\github\\safe-streets\\src\\App.jsx",[],"D:\\github\\safe-streets\\src\\components\\Nav.jsx",["54"],"//TODO - If favourites has length - show navigation 'view favourites' else hide the option\r\n\r\nimport React, {useContext} from 'react';\r\nimport { FavouritesContext } from '../context/FavouritesContext';\r\nimport policeIcon from '../images/police-icon.svg'; \r\nimport '../App.css';\r\nimport 'fontsource-roboto';\r\n\r\nconst Nav = () => {\r\n\r\n  // Use Favourites context to get Favourites, to find and display length of favourites list\r\n  const [favourites, setFavourites] = useContext (FavouritesContext);\r\n\r\n  return (\r\n    <div className=\"nav navbar-nav\">\r\n     <img src={policeIcon} alt=\"Police Helmet Logo\" width=\"45\" height=\"45\" />\r\n      <h3>My Nav Bar</h3>\r\n      <p>Number of Favourites: {favourites.length}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","D:\\github\\safe-streets\\src\\components\\FavouritesList.jsx",["55","56"],"import React, {useState, useContext} from 'react';\r\nimport Favourite from './Favourite';\r\nimport {FavouritesContext} from '../context/FavouritesContext';\r\nimport uuid from 'react-uuid';\r\nimport '../App.css';\r\n\r\nconst FavouritesList = () => {\r\n\r\n\t// Set the context as FavouritesContext\r\n  const [favourites, setFavourites] = useContext (FavouritesContext);\r\n\r\n  // List each favourite using Favourite component and data from FavouritesContext for props\r\n  return (\r\n    <div>\r\n    <li className=\"favourite\">\r\n      {favourites.map (favourite => (\r\n        <Favourite title={favourite.title} mapURL={favourite.mapURL} key={uuid()} />\r\n      ))}\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FavouritesList;\r\n","D:\\github\\safe-streets\\src\\components\\AddFavourite.jsx",["57"],"//TODO - mapURL will be retrieved from API\r\n//TODO - addFavourite will use mongoose schema\r\n//TODO - add and update favourite will use mongoDB\r\n\r\nimport React, {useState, useContext} from 'react';\r\nimport {FavouritesContext} from '../context/FavouritesContext';\r\n\r\n// UI elements import\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst AddFavourite = () => {\r\n  // Context imported\r\n  const [favourites, setFavourites] = useContext (FavouritesContext);\r\n\r\n  // Set State\r\n\r\n  // Create event handler function to update state using the state functions\r\n  const updateTitle = e => {\r\n    setTitle (e.target.value);\r\n  };\r\n\r\n  // Set state for each value of title and mapURL\r\n  const [title, setTitle] = useState ('');\r\n  const [mapURL, setMapURL] = useState ('');\r\n\r\n  // Eventually** This will be called to update the mapURL from wherever it is stored after a search\r\n  const updateMapURL = e => {\r\n    setMapURL (e.target.value);\r\n  };\r\n\r\n  const addFavourite = e => {\r\n    // Prevent default page refresh when typing in input boxes on each character - since state in changing\r\n    e.preventDefault ();\r\n\r\n    // To add Favourite, get previous favourites list and add a new favourite object to existing ones\r\n    setFavourites (prevFavourites => [\r\n      ...prevFavourites,\r\n      {\r\n        title: title, \r\n        mapURL: mapURL\r\n      }\r\n    ]);\r\n  };\r\n\r\n  // Eventually ** mapURL will be from wherever I store it after a search and not updated from user typing in form\r\n  return (\r\n    <form onSubmit={addFavourite}>\r\n      <input type=\"text\" name=\"title\" value={title} onChange={updateTitle} />\r\n      <input type=\"text\" name=\"mapURL\" value={mapURL} onChange={updateMapURL} />\r\n      <Button variant=\"contained\" color=\"primary\">Submit</Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddFavourite;\r\n","D:\\github\\safe-streets\\src\\context\\FavouritesContext.jsx",[],"D:\\github\\safe-streets\\src\\components\\Favourite.jsx",[],"D:\\github\\safe-streets\\src\\components\\MapSection.jsx",["58","59"],"//TODO - will contain map image, favourite options and filter buttons components\r\n\r\nimport React, {useState, useContext} from 'react';\r\nimport Nav from './Nav';\r\nimport MapImage from './MapImage';\r\nimport FilterButtonsList from './FilterButtonsList';\r\nimport AddFavourite from './AddFavourite';\r\nimport {FiltersProvider} from '../context/FiltersContext';\r\nimport '../App.css';\r\n\r\nconst MapSection = () => {\r\n  return (\r\n    <div>\r\n      <Nav />\r\n      <div className=\"MapImage\">\r\n        <MapImage />\r\n      </div>\r\n\r\n      <FiltersProvider>\r\n        <div className=\"FilterButtons\">\r\n         <FilterButtonsList />\r\n        </div>\r\n        <div className=\"AddFavourite\">\r\n          <AddFavourite />\r\n        </div>\r\n      </FiltersProvider>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapSection;\r\n","D:\\github\\safe-streets\\src\\components\\MapImage.jsx",["60"],"import React, {useState} from 'react';\r\nimport '../App.css';\r\n\r\n// TODO - put this in a container which can display the title if favourited\r\n// TODO -Will need state>?  with default as UK wide map - then if back button from account\r\n// TODO -page etc can reload current map from state?  what about history?\r\n\r\n/**\r\n * Component to display a static map image \r\n * \r\n * @param {string} mapURL - URL for map image\r\n */\r\nconst MapImage = ({mapURL}) => {\r\n  return (   \r\n      <img className=\"mapImg\" src={mapURL} alt=\"Map\" />    \r\n  );\r\n};\r\n\r\nexport default MapImage;\r\n","D:\\github\\safe-streets\\src\\components\\FilterButtonsList.jsx",["61","62"],"D:\\github\\safe-streets\\src\\context\\FiltersContext.jsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":12,"column":22,"nodeType":"69","messageId":"70","endLine":12,"endColumn":35},{"ruleId":"67","severity":1,"message":"71","line":1,"column":16,"nodeType":"69","messageId":"70","endLine":1,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":10,"column":22,"nodeType":"69","messageId":"70","endLine":10,"endColumn":35},{"ruleId":"67","severity":1,"message":"72","line":13,"column":10,"nodeType":"69","messageId":"70","endLine":13,"endColumn":20},{"ruleId":"67","severity":1,"message":"71","line":3,"column":16,"nodeType":"69","messageId":"70","endLine":3,"endColumn":24},{"ruleId":"67","severity":1,"message":"73","line":3,"column":26,"nodeType":"69","messageId":"70","endLine":3,"endColumn":36},{"ruleId":"67","severity":1,"message":"71","line":1,"column":16,"nodeType":"69","messageId":"70","endLine":1,"endColumn":24},{"ruleId":"67","severity":1,"message":"71","line":1,"column":29,"nodeType":"69","messageId":"70","endLine":1,"endColumn":37},{"ruleId":"67","severity":1,"message":"74","line":38,"column":19,"nodeType":"69","messageId":"70","endLine":38,"endColumn":29},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'setFavourites' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'favourites' is assigned a value but never used.","'useContext' is defined but never used.","'setFilters' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]